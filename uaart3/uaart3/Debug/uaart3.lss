
uaart3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000102  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000030  00000000  00000000  00000132  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000dc  00000000  00000000  00000162  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000a1  00000000  00000000  0000023e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000d5  00000000  00000000  000002df  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000054  00000000  00000000  000003b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000130  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000005b  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000020  00000000  00000000  00000593  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__vector_11>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 42 00 	call	0x84	; 0x84 <main>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <uart_init>:


// function to initialize UART
void uart_init (void)
{
	UBRRH=(BAUDRATE>>8);
  6c:	10 bc       	out	0x20, r1	; 32
	UBRRL=BAUDRATE;							//set baud rate
  6e:	87 e6       	ldi	r24, 0x67	; 103
  70:	89 b9       	out	0x09, r24	; 9
	UCSRB|=(1<<TXEN)|(1<<RXEN); 			//enable receiver and transmitter
  72:	8a b1       	in	r24, 0x0a	; 10
  74:	88 61       	ori	r24, 0x18	; 24
  76:	8a b9       	out	0x0a, r24	; 10
	UCSRC|=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1); // 8bit data format
  78:	80 b5       	in	r24, 0x20	; 32
  7a:	86 68       	ori	r24, 0x86	; 134
  7c:	80 bd       	out	0x20, r24	; 32
        UCSRB|=( 1<< RXCIE);
  7e:	57 9a       	sbi	0x0a, 7	; 10
   sei();
  80:	78 94       	sei
  82:	08 95       	ret

00000084 <main>:
} */

// main function: entry point of program
int main (void)
{
	DDRD=0b00000010;
  84:	82 e0       	ldi	r24, 0x02	; 2
  86:	81 bb       	out	0x11, r24	; 17
	//static unsigned char a;
	//char buf[10];
	//unsigned char buf[10];
	

	uart_init(); 							// initialize UART
  88:	0e 94 36 00 	call	0x6c	; 0x6c <uart_init>
  8c:	ff cf       	rjmp	.-2      	; 0x8c <main+0x8>

0000008e <__vector_11>:
	
	
	return 0;
}
ISR(USART_RXC_vect)
{
  8e:	1f 92       	push	r1
  90:	0f 92       	push	r0
  92:	0f b6       	in	r0, 0x3f	; 63
  94:	0f 92       	push	r0
  96:	11 24       	eor	r1, r1
  98:	8f 93       	push	r24
	char ReceivedByte;
	ReceivedByte = UDR; // Fetch the received byte value into the variable "ByteReceived"
  9a:	8c b1       	in	r24, 0x0c	; 12
	UDR = ReceivedByte; // Echo back the received byte back to the computer
  9c:	8c b9       	out	0x0c, r24	; 12
  9e:	8f 91       	pop	r24
  a0:	0f 90       	pop	r0
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	0f 90       	pop	r0
  a6:	1f 90       	pop	r1
  a8:	18 95       	reti

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>
